{"version":3,"sources":["components/InfoBox.js","Utils/DataOnMap.js","components/Map.js","components/Table.js","components/LineGraph.js","Utils/Sort.js","Utils/PrettyPrint.js","App.js","reportWebVitals.js","index.js"],"names":["InfoBox","title","cases","active","isRed","total","props","Card","onClick","className","CardContent","Typography","color","casesTypeColors","hex","multiplier","recovered","deaths","showDataOnMap","data","casesType","map","country","Circle","center","countryInfo","lat","long","fillColor","fillOpacity","radius","Math","sqrt","Popup","style","backgroundImage","flag","numeral","format","Map","countries","zoom","MapContainer","TileLayer","attribution","url","Table","options","legend","display","elements","point","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","value","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","buildChartData","lastDataPoint","chartData","date","newDataPoint","x","y","push","LineGraph","useState","setData","useEffect","a","fetch","then","response","json","fetchData","length","datasets","backgroundColor","borderColor","sortData","sort","b","prettyPrint","number","App","setCountries","setCountry","setCountryInfo","tableData","setTableData","lng","mapCenter","setMapCenter","mapZoom","setMapZoom","mapCountries","setMapCountries","setCasesType","document","name","iso2","sortedData","getCountriesData","onChangeCountry","event","countryCode","target","FormControl","Select","variant","onChange","MenuItem","e","todayCases","todayRecovered","todayDeaths","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.f9b9b612.chunk.js","sourcesContent":["import { Card, CardContent, Typography } from \"@material-ui/core\"\nimport \"./InfoBox.css\";\nfunction InfoBox({ title, cases, active, isRed, total, ...props }) {\n    return (\n        <Card \n            onClick={props.onClick}\n            className={`infoBox ${active && \"infoxBox--selected\"} ${isRed && \"infoBox--red\"}`}>\n            <CardContent>\n                <Typography className=\"infoBox__title\" color=\"textSecondary\">{title}</Typography>\n\n                <h2 className={`infoBox__cases ${!isRed && \"infoBox__cases--green\"}`}>{cases}</h2>\n\n                <Typography className=\"infoBox__total\" color=\"textSecondary\">{total} Total</Typography>\n            </CardContent>\n        </Card>\n    )\n}\n\nexport default InfoBox;","import numeral from \"numeral\";\nimport { Circle, Popup } from \"react-leaflet\";\n\nconst casesTypeColors = {\n  cases: {\n    hex: \"#CC1034\",\n    multiplier: 800,\n  },\n  recovered: {\n    hex: \"#7dd71d\",\n    multiplier: 1200,\n  },\n  deaths: {\n    hex: \"#fb4443\",\n    multiplier: 2000,\n  },\n};\n\nexport const showDataOnMap = (data, casesType = \"cases\") =>\n  data.map((country) => (\n    <Circle\n      center={[country.countryInfo.lat, country.countryInfo.long]}\n      color={casesTypeColors[casesType].hex}\n      fillColor={casesTypeColors[casesType].hex}\n      fillOpacity={0.4}\n      radius={\n        Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier\n      }\n    >\n      <Popup>\n        <div className=\"info-container\">\n          <div\n            className=\"info-flag\"\n            style={{ backgroundImage: `url(${country.countryInfo.flag})` }}\n          ></div>\n          <div className=\"info-name\">{country.country}</div>\n          <div className=\"info-confirmed\">\n            Cases: {numeral(country.cases).format(\"0,0\")}\n          </div>\n          <div className=\"info-recovered\">\n            Recovered: {numeral(country.recovered).format(\"0,0\")}\n          </div>\n          <div className=\"info-deaths\">\n            Deaths: {numeral(country.deaths).format(\"0,0\")}\n          </div>\n        </div>\n      </Popup>\n    </Circle>\n  ));","import 'leaflet/dist/leaflet.css';\nimport \"./Map.css\";\nimport { MapContainer, TileLayer } from \"react-leaflet\";\nimport { showDataOnMap } from \"../Utils/DataOnMap\";\n\nfunction Map({ countries, center, zoom, casesType }) {    \n    return (\n        <div className=\"map\">\n            <MapContainer center={center} zoom={zoom}>\n                <TileLayer\n                    attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                    url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n                />\n                {showDataOnMap(countries, casesType)}\n            </MapContainer>\n        </div>\n    )\n}\n\nexport default Map;","import \"./Table.css\";\nimport numeral from \"numeral\";\n\nfunction Table({ countries }) {\n    return (\n        <div className=\"table\">\n                {\n                    countries.map(({ country, cases }) => (\n                        <tr>\n                            <td>{country}</td>\n                            <td>\n                                <strong>{numeral(cases).format(\"0,0\")}</strong>\n                            </td>\n                        </tr>\n                    ))\n                }\n        </div>\n    )\n}\n\nexport default Table;","import { useEffect, useState } from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport numeral from \"numeral\";\n\nconst options = {\n    legend: {\n        display: false,\n    },\n    elements: {\n        point: {\n            radius: 0,\n        },\n    },\n    maintainAspectRatio: false,\n    tooltips: {\n        mode: \"index\",\n        intersect: false,\n        callbacks: {\n            label: function (tooltipItem, data) {\n                return numeral(tooltipItem.value).format(\"+0,0\");\n            },\n        },\n    },\n    scales: {\n        xAxes: [\n            {\n                type: \"time\",\n                time: {\n                    format: \"MM/DD/YY\",\n                    tooltipFormat: \"ll\",\n                },\n            },\n        ],\n        yAxes: [\n            {\n                gridLines: {\n                    display: false,\n                },\n                ticks: {\n                    // Include a dollar sign in the ticks\n                    callback: function (value, index, values) {\n                        return numeral(value).format(\"0a\");\n                    },\n                },\n            },\n        ],\n    },\n};\n\nconst buildChartData = (data, casesType) => {\n    let chartData = [];\n    let lastDataPoint;\n    for (let date in data.cases) {\n        if (lastDataPoint) {\n            let newDataPoint = {\n                x: date,\n                y: data[casesType][date] - lastDataPoint,\n            };\n            chartData.push(newDataPoint);\n        }\n        lastDataPoint = data[casesType][date];\n    }\n    return chartData;\n};\n\nfunction LineGraph({ casesType }) {\n    const [data, setData] = useState({});\n\n    useEffect(() => {\n        const fetchData = async () => {\n            await fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=120\")\n                .then((response) => {\n                    return response.json();\n                })\n                .then((data) => {\n                    let chartData = buildChartData(data, casesType);\n                    setData(chartData);\n                });\n        };\n\n        fetchData();\n    }, [casesType]);\n\n    return (\n        <div>\n            {data?.length > 0 && (\n                <Line\n                    data={{\n                        datasets: [\n                            {\n                                backgroundColor: \"rgba(204, 16, 52, 0.5)\",\n                                borderColor: \"#CC1034\",\n                                data: data,\n                            },\n                        ],\n                    }}\n                    options={options}\n                />\n            )}\n        </div>\n    );\n}\n\nexport default LineGraph;","export const sortData = (data) => {\n    const sortedData = [...data];\n    return sortedData.sort((a, b) => a.cases > b.cases ? -1 : 1);\n}","import numeral from \"numeral\"\n\nexport const prettyPrint = number => \n    number ? `+${numeral(number).format(\"0.0a\")}` : \"+0\"; ","import './App.css';\nimport InfoBox from \"./components/InfoBox\";\nimport Map from \"./components/Map\";\nimport Table from \"./components/Table\";\nimport LineGraph from \"./components/LineGraph\";\nimport { sortData } from \"./Utils/Sort\";\nimport { prettyPrint } from \"./Utils/PrettyPrint\";\nimport {\n  MenuItem,\n  FormControl,\n  Select,\n  Card,\n  CardContent\n} from \"@material-ui/core\"\nimport { useEffect, useState } from 'react';\nfunction App() {\n\n  const [countries, setCountries] = useState([]);\n  const [country, setCountry] = useState(\"worldwide\");\n  const [countryInfo, setCountryInfo] = useState({});\n  const [tableData, setTableData] = useState([]);\n  const [mapCenter, setMapCenter] = useState({ lat: 34.80746, lng: -40.4796 });\n  const [mapZoom, setMapZoom] = useState(3);\n  const [mapCountries, setMapCountries] = useState([]);\n  const [casesType, setCasesType] = useState(\"cases\");\n\n  useEffect(() => {\n    document.title = \"Covid 19 Live Tracker\"\n }, []);\n\n  useEffect(() => {\n    fetch(\"https://disease.sh/v3/covid-19/all\")\n      .then(response => response.json())\n      .then(data => {\n        setCountryInfo(data);\n      })\n  }, [])\n\n  useEffect(() => {\n    const getCountriesData = async () => {\n      await fetch(\"https://disease.sh/v3/covid-19/countries\")\n        .then(response => response.json())\n        .then(data => {\n          let countries = data.map((country) => ({\n            name: country.country,\n            value: country.countryInfo.iso2\n          }))\n\n          let sortedData = sortData(data);\n          setTableData(sortedData);\n          setCountries(countries);\n          setMapCountries(data);\n        })\n    }\n\n    getCountriesData();\n  }, [])\n\n  const onChangeCountry = async (event) => {\n    const countryCode = event.target.value;\n    setCountry(countryCode);\n\n    const url = countryCode === 'worldwide' ? 'https://disease.sh/v3/covid-19/all' :\n      `https://disease.sh/v3/covid-19/countries/${countryCode}`\n\n    await fetch(url)\n      .then(response => response.json())\n      .then(data => {\n        setCountry(countryCode);\n        setCountryInfo(data);\n        setMapCenter([data.countryInfo.lat, data.countryInfo.long]);\n        setMapZoom(4);\n      })\n  }\n\n  return (\n    <div className=\"app\">\n      <div className=\"app__left\">\n        <div className=\"app__header\">\n\n          <h1>Covid 19 Live Tracker</h1>\n          <FormControl className=\"app__dropdown\">\n            <Select\n              variant=\"outlined\"\n              onChange={onChangeCountry}\n              value={country}\n            >\n              <MenuItem value=\"worldwide\">Worldwide</MenuItem>\n              {\n                countries.map((country) => (\n                  <MenuItem key={country.name} value={country.value}>{country.name}</MenuItem>\n                ))\n              }\n            </Select>\n          </FormControl>\n\n        </div>\n\n        <div className=\"app__stats\">\n          <InfoBox\n            active={casesType === \"cases\"}\n            isRed\n            onClick={e => setCasesType(\"cases\")}\n            title=\"Coronavirus Cases\"\n            cases={prettyPrint(countryInfo.todayCases)}\n            total={prettyPrint(countryInfo.cases)} />\n\n          <InfoBox\n            active={casesType === \"recovered\"}\n            onClick={e => setCasesType(\"recovered\")}\n            title=\"Recoveries\"\n            cases={prettyPrint(countryInfo.todayRecovered)}\n            total={prettyPrint(countryInfo.recovered)} />\n\n          <InfoBox\n            active={casesType === \"deaths\"}\n            isRed\n            onClick={e => setCasesType(\"deaths\")}\n            title=\"Deaths\"\n            cases={prettyPrint(countryInfo.todayDeaths)}\n            total={prettyPrint(countryInfo.deaths)} />\n        </div>\n\n        <Map\n          countries={mapCountries}\n          center={mapCenter}\n          zoom={mapZoom}\n          casesType={casesType}\n        />\n      </div>\n\n      <Card className=\"app__right\">\n        <CardContent>\n          <h3>Live Cases by Country</h3>\n          <Table countries={tableData} />\n          <h3 className=\"app__graphTitle\">Worldwide new {casesType}</h3>\n          <LineGraph className=\"app_graph\" casesType={casesType} />\n        </CardContent>\n      </Card>\n\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}